@using BlindBoxShop.Shared.DataTransferObject.Order
@using BlindBoxShop.Shared.DataTransferObject.OrderDetail
@using BlindBoxShop.Shared.Enum
@using MudBlazor
@using System.Threading.Tasks
@using System
@using System.Linq
@using BlindBoxShop.Service.Contract
@using BlindBoxShop.Application.Components.Dialogs
@using BlindBoxShop.Shared.DataTransferObject.BlindBox
@using BlindBoxShop.Shared.DataTransferObject.Review
@using BlindBoxShop.Shared.Features

@inject ISnackbar Snackbar
@inject IServiceManager ServiceManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @if (OrderWithDetails == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <div class="py-2">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <MudText Typo="Typo.h6">Order #@OrderWithDetails.Order.Id.ToString().Substring(0, 8)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">@OrderWithDetails.Order.CreatedAt.ToString("dd MMMM yyyy, HH:mm")</MudText>
                    </div>
                    <MudBadge Color="@GetOrderStatusColor(OrderWithDetails.Order.Status)" Overlap="true" Class="mx-6 my-4">
                        @OrderWithDetails.Order.Status.ToString()
                    </MudBadge>
                </div>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.subtitle1" Class="mb-2">Items</MudText>
                <div>
                    @foreach (var item in OrderWithDetails.OrderDetails)
                    {
                        <div class="flex justify-between w-full items-center p-2 border-b">
                            <div class="flex items-center">
                                <div class="product-image-container flex-shrink-0 mr-3 border border-gray-200">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl) || item.BlindBoxItemId.HasValue)
                                    {
                                        <img src="@(GetImageUrl(item).Result)" alt="@(GetDisplayName(item))" 
                                             class="h-full w-full object-contain" 
                                             @onclick="async () => await OpenImagePreview(await GetImageUrl(item))" />
                                        <div class="image-overlay" @onclick="async () => await OpenImagePreview(await GetImageUrl(item))">
                                            <MudIcon Icon="@Icons.Material.Filled.ZoomIn" Size="Size.Small" Color="Color.Surface" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Spa" Size="Size.Small" Color="Color.Primary" />
                                        </div>
                                    }
                                </div>
                                <div>
                                    @if (_itemsLoading.ContainsKey(item.Id) && _itemsLoading[item.Id])
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        <div class="font-medium">@(GetDisplayName(item))</div>
                                        @if (_blindBoxItems.ContainsKey(item.Id) && _blindBoxItems[item.Id] != null)
                                        {
                                            <div class="flex items-center mt-1">
                                                <MudChip T="string" Size="Size.Small" 
                                                         Color="@GetItemRarityColor(_blindBoxItems[item.Id].Rarity)" 
                                                         Class="mr-1 px-2 py-0">
                                                    @GetRarityText(_blindBoxItems[item.Id].Rarity)
                                                </MudChip>
                                                @if (_blindBoxItems[item.Id].IsSecret)
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.Star" 
                                                          Size="Size.Small" 
                                                          Color="Color.Warning" 
                                                          Class="ml-1" />
                                                }
                                            </div>
                                        }
                                        <div class="text-xs text-gray-500">Qty: @item.Quantity</div>
                                    }
                                </div>
                            </div>
                            <div class="flex flex-col items-end">
                                <MudText Typo="Typo.body2">@FormatPrice(item.Price)</MudText>
                                @if (OrderWithDetails.Order.Status == OrderStatus.Delivered && 
                                     !_reviewedBlindBoxes.Contains(item.BlindBoxId))
                                {
                                    <MudButton Variant="Variant.Text" 
                                             Color="Color.Primary" 
                                             Size="Size.Small"
                                             StartIcon="@Icons.Material.Filled.RateReview"
                                             Class="mt-1"
                                             OnClick="() => OpenReviewDialog(item.BlindBoxId, item.BlindBoxName)">
                                        Review
                                    </MudButton>
                                }
                                @if (OrderWithDetails.Order.Status == OrderStatus.Delivered && 
                                     _reviewedBlindBoxes.Contains(item.BlindBoxId))
                                {
                                    <MudChip Size="Size.Small" 
                                           Color="Color.Success" 
                                           Icon="@Icons.Material.Filled.Check"
                                           T="string"
                                           Class="mt-1 px-2">
                                        Reviewed
                                    </MudChip>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                <MudDivider Class="my-4" />
                
                <div class="flex justify-between items-center mb-2">
                    <MudText Typo="Typo.body1">Subtotal</MudText>
                    <MudText Typo="Typo.body2">@FormatPrice(OrderWithDetails.Order.SubTotal)</MudText>
                </div>
                
                <div class="flex justify-between items-center mb-2">
                    <MudText Typo="Typo.body1">Shipping</MudText>
                    <MudText Typo="Typo.body2">@FormatPrice(20000)</MudText>
                </div>
                
                <div class="flex justify-between items-center mb-2 font-bold">
                    <MudText Typo="Typo.h6">Total</MudText>
                    <MudText Typo="Typo.h6" Color="Color.Primary">@FormatPrice(OrderWithDetails.Order.Total)</MudText>
                </div>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.subtitle1" Class="mb-2">Shipping Information</MudText>
                <div class="p-3 bg-gray-50 rounded-lg mb-3">
                    <div class="mb-1"><span class="font-semibold">Name:</span> @OrderWithDetails.Order.CustomerName</div>
                    <div class="mb-1"><span class="font-semibold">Phone:</span> @Phone</div>
                    <div><span class="font-semibold">Address:</span> @OrderWithDetails.Order.Address, @OrderWithDetails.Order.Wards, @OrderWithDetails.Order.Province</div>
                </div>
                
                <MudText Typo="Typo.subtitle1" Class="mb-2 mt-4">Payment Information</MudText>
                <div class="p-3 bg-gray-50 rounded-lg mb-3">
                    <div class="mb-1"><span class="font-semibold">Payment Method:</span> @GetPaymentMethodName(OrderWithDetails.Order.PaymentMethod)</div>
                </div>
                
                @if (OrderWithDetails.Order.Status == OrderStatus.AwaitingPayment && OrderWithDetails.Order.PaymentMethod != PaymentMethod.Cash)
                {
                    <MudAlert Severity="Severity.Info" Class="my-6">
                        <div class="flex items-center mb-1">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                            <MudText Typo="Typo.body1" Class="font-semibold">Awaiting Payment</MudText>
                        </div>
                        <MudText Typo="Typo.body2">
                            Your order is awaiting payment confirmation. Once payment is received, your order will be processed.
                        </MudText>
                    </MudAlert>
                    
                    <div class="flex flex-col gap-6 mt-8 mb-6">
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Success" 
                                 OnClick="ProceedPayment"
                                 FullWidth="true"
                                 Size="Size.Large"
                                 StartIcon="@Icons.Material.Filled.Payment"
                                 Disabled="_isProcessingPayment"
                                 Style="height: 56px; font-size: 16px;">
                            CONTINUE PAYMENT
                        </MudButton>
                        
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 OnClick="ChangePaymentMethodToCOD"
                                 FullWidth="true"
                                 Size="Size.Large"
                                 StartIcon="@Icons.Material.Filled.CreditCard"
                                 Style="height: 56px; font-size: 16px; background-color: #00897b; margin-top: 16px;">
                            CHANGE TO COD
                        </MudButton>
                    </div>
                }
                
                @if (OrderWithDetails.Order.Status == OrderStatus.Pending && OrderWithDetails.Order.PaymentMethod != PaymentMethod.Cash)
                {
                    <MudAlert Severity="Severity.Info" Class="my-6">
                        <div class="flex items-center mb-1">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                            <MudText Typo="Typo.body1" Class="font-semibold">Order Processing</MudText>
                        </div>
                        <MudText Typo="Typo.body2">
                            Your order has been received and is being processed.
                        </MudText>
                    </MudAlert>
                }
                
                @if ((OrderWithDetails.Order.Status == OrderStatus.Pending || OrderWithDetails.Order.Status == OrderStatus.Processing || OrderWithDetails.Order.Status == OrderStatus.AwaitingPayment) && !HasBlindBoxItems())
                {
                    <div class="mt-8 mb-6">
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Error" 
                                 OnClick="CancelOrder"
                                 FullWidth="true"
                                 Size="Size.Large"
                                 StartIcon="@Icons.Material.Filled.Cancel"
                                 Style="height: 56px; font-size: 16px;">
                            CANCEL ORDER
                        </MudButton>
                    </div>
                }
                @if ((OrderWithDetails.Order.Status == OrderStatus.Pending || OrderWithDetails.Order.Status == OrderStatus.Processing) && HasBlindBoxItems())
                {
                    <MudAlert Severity="Severity.Warning" Class="my-4">
                        <div class="flex items-center mb-1">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                            <MudText Typo="Typo.body1" Class="font-semibold">Cannot Cancel Order</MudText>
                        </div>
                        <MudText Typo="Typo.body2">
                            Online BlindBox orders cannot be cancelled once items have been assigned.
                        </MudText>
                    </MudAlert>
                }
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Close</MudButton>
    </DialogActions>
</MudDialog>

<!-- Image Preview Overlay -->
<MudOverlay @bind-Visible="_imagePreviewVisible" DarkBackground="true" ZIndex="999" OnClick="CloseImagePreview">
    <div class="d-flex justify-center align-items-center" style="height: 100vh;" @onclick:preventDefault>
        <div class="position-relative" style="width: 90%; max-width: 800px; max-height: 90vh; overflow: auto;">
            <MudCard Class="pa-4 position-relative" Style="background-color: rgba(0,0,0,0.8);">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Surface">Image Preview</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Surface" OnClick="CloseImagePreview" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="d-flex flex-column align-center justify-center">
                    <div class="result-image-container @($"{(_isZoomed ? "zoomed" : "")}")">
                        <MudImage Src="@_selectedImage" 
                               Alt="Image Preview"
                               Class="result-image rounded-lg" 
                               ObjectFit="ObjectFit.Contain"
                               @onclick="ToggleZoom" />
                    </div>
                </MudCardContent>
            </MudCard>
        </div>
    </div>
</MudOverlay>

<style>
    .product-image-container {
        width: 48px;
        height: 48px;
        overflow: hidden;
        border-radius: 4px;
        position: relative;
        cursor: pointer;
    }
    
    .product-image-container:hover .image-overlay {
        opacity: 1;
    }
    
    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.3);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.2s ease;
    }
    
    .result-image-container {
        width: 280px;
        height: 280px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: transparent;
        border-radius: 8px;
        transition: transform 0.3s ease;
        cursor: zoom-in;
    }
    
    .result-image-container.zoomed {
        transform: scale(1.5);
        cursor: zoom-out;
    }
    
    .result-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        width: 100%;
        height: 100%;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    
    [Parameter] public OrderWithDetailsDto OrderWithDetails { get; set; }
    
    [Parameter] public string Phone { get; set; } = "N/A";
    
    [Parameter] public Dictionary<Guid, BlindBoxItemDto> BlindBoxItems { get; set; } = new Dictionary<Guid, BlindBoxItemDto>();
    
    private bool _imagePreviewVisible = false;
    private string _selectedImage = string.Empty;
    private bool _isZoomed = false;
    private bool _isProcessingPayment = false;
    
    // Dictionary to track loading state
    private Dictionary<Guid, bool> _itemsLoading = new Dictionary<Guid, bool>();
    
    // Copy local reference to service-loaded BlindBoxItems
    private Dictionary<Guid, BlindBoxItemDto> _blindBoxItems = new Dictionary<Guid, BlindBoxItemDto>();
    
    // Dictionary to track which BlindBoxes the user has already reviewed
    private HashSet<Guid> _reviewedBlindBoxes = new HashSet<Guid>();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (OrderWithDetails != null)
        {
            // Initialize loading state for all items
            foreach (var detail in OrderWithDetails.OrderDetails)
            {
                _itemsLoading[detail.Id] = false;
            }
            
            // Copy BlindBoxItems from parent if provided
            if (BlindBoxItems != null && BlindBoxItems.Count > 0)
            {
                _blindBoxItems = new Dictionary<Guid, BlindBoxItemDto>(BlindBoxItems);
                
                // Update image URLs for order details that have BlindBoxItems
                foreach (var detail in OrderWithDetails.OrderDetails)
                {
                    if (detail.BlindBoxItemId.HasValue && 
                        _blindBoxItems.ContainsKey(detail.Id) && 
                        _blindBoxItems[detail.Id] != null && 
                        string.IsNullOrEmpty(detail.ImageUrl) &&
                        !string.IsNullOrEmpty(_blindBoxItems[detail.Id].ImageUrl))
                    {
                        // Ensure URL format is correct
                        var imageUrl = _blindBoxItems[detail.Id].ImageUrl;
                        if (!imageUrl.StartsWith("http://") && !imageUrl.StartsWith("https://") && !imageUrl.StartsWith("/"))
                        {
                            imageUrl = "/" + imageUrl;
                        }
                        
                        // Update the image URL in the OrderDetail
                        detail.ImageUrl = imageUrl;
                    }
                }
            }
            else
            {
                // Fallback to loading BlindBoxItems if not provided by the parent
                foreach (var detail in OrderWithDetails.OrderDetails)
                {
                    if (detail.BlindBoxItemId.HasValue)
                    {
                        await LoadBlindBoxItem(detail.Id, detail.BlindBoxItemId.Value);
                    }
                }
            }
            
            // Check if the order is delivered, then load existing reviews
            if (OrderWithDetails.Order.Status == OrderStatus.Delivered)
            {
                await LoadUserReviews();
            }
        }
    }
    
    // Fallback method if items weren't loaded by the parent component
    private async Task LoadBlindBoxItem(Guid orderDetailId, Guid blindBoxItemId)
    {
        try
        {
            _itemsLoading[orderDetailId] = true;
            StateHasChanged();
            
            using var blindBoxItemService = ServiceManager.BlindBoxItemService;
            var result = await blindBoxItemService.GetBlindBoxItemByIdAsync(blindBoxItemId, false);
            
            if (result.IsSuccess && result.Value != null)
            {
                _blindBoxItems[orderDetailId] = result.Value;
                
                // If the item has an image URL but our OrderDetail doesn't, update it
                var orderDetail = OrderWithDetails.OrderDetails.FirstOrDefault(od => od.Id == orderDetailId);
                if (orderDetail != null && string.IsNullOrEmpty(orderDetail.ImageUrl) && !string.IsNullOrEmpty(result.Value.ImageUrl))
                {
                    // Ensure URL format is correct
                    var imageUrl = result.Value.ImageUrl;
                    if (!imageUrl.StartsWith("http://") && !imageUrl.StartsWith("https://") && !imageUrl.StartsWith("/"))
                    {
                        imageUrl = "/" + imageUrl;
                    }
                    
                    // Update the image URL in the OrderDetail
                    orderDetail.ImageUrl = imageUrl;
                }
            }
            else
            {
                Console.WriteLine($"Failed to load BlindBoxItem {blindBoxItemId}: {result.Errors?.FirstOrDefault()?.Description}");
                _blindBoxItems[orderDetailId] = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading BlindBoxItem: {ex.Message}");
            _blindBoxItems[orderDetailId] = null;
        }
        finally
        {
            _itemsLoading[orderDetailId] = false;
            StateHasChanged();
        }
    }
    
    private string GetDisplayName(OrderDetailDto detail)
    {
        // If this detail has a BlindBoxItem, use its name instead
        if (detail.BlindBoxItemId.HasValue && _blindBoxItems.ContainsKey(detail.Id) && _blindBoxItems[detail.Id] != null)
        {
            return _blindBoxItems[detail.Id].Name;
        }
        
        // Otherwise use the BlindBox name
        return detail.BlindBoxName;
    }
    
    private string FormatPrice(decimal price)
    {
        return $"{price:N0} ₫";
    }
    
    private MudBlazor.Color GetOrderStatusColor(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Processing => Color.Info,
            OrderStatus.Delivered => Color.Success,
            OrderStatus.Cancelled => Color.Error,
            OrderStatus.Pending => Color.Warning,
            _ => Color.Default
        };
    }
    
    private MudBlazor.Color GetItemRarityColor(int rarity)
    {
        return rarity switch
        {
            0 => Color.Success,  // Common
            1 => Color.Info,     // Uncommon
            2 => Color.Warning,  // Rare
            3 => Color.Error,    // Epic
            4 => Color.Secondary, // Legendary
            _ => Color.Default
        };
    }
    
    private string GetRarityText(int rarity)
    {
        return rarity switch
        {
            0 => "Common",
            1 => "Uncommon",
            2 => "Rare",
            3 => "Epic",
            4 => "Legendary",
            _ => "Unknown"
        };
    }
    
    private string GetPaymentMethodName(PaymentMethod paymentMethod)
    {
        return paymentMethod switch
        {
            PaymentMethod.Cash => "Cash on Delivery (COD)",
            PaymentMethod.VnPay => "VNPay",
            _ => paymentMethod.ToString()
        };
    }
    
    private async Task OpenImagePreview(string imageUrl)
    {
        if (!string.IsNullOrEmpty(imageUrl))
        {
            _selectedImage = imageUrl;
            _isZoomed = false;
            _imagePreviewVisible = true;
            StateHasChanged();
        }
    }
    
    private void CloseImagePreview()
    {
        _imagePreviewVisible = false;
        _isZoomed = false;
        StateHasChanged();
    }
    
    private void ToggleZoom()
    {
        _isZoomed = !_isZoomed;
        StateHasChanged();
    }
    
    // Simple method for closing dialog
    private void Cancel() => MudDialog.Cancel();
    
    private async Task ChangePaymentMethodToCOD()
    {
        try
        {
            var parameters = new DialogParameters
            {
                ["OrderId"] = OrderWithDetails.Order.Id,
                ["Content"] = "Are you sure you want to change the payment method to COD? The order will be processed immediately after you confirm.",
                ["IsChangePayment"] = true,
                ["Title"] = "Confirm Payment Method Change",
                ["ConfirmButtonText"] = "Confirm Change",
                ["CancelButtonText"] = "Cancel"
            };
            
            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmCancelOrderDialog>("Confirm Payment Method Change", parameters, options);
            var result = await dialog.Result;
            
            if (!result.Canceled)
            {
                // For immediate feedback, update the local order object
                // This gives user feedback even before the dialog closes and page refreshes
                if (result.Data is bool success && success)
                {
                    OrderWithDetails.Order.PaymentMethod = PaymentMethod.Cash;
                    OrderWithDetails.Order.Status = OrderStatus.Processing;
                    
                    Snackbar.Add("Payment method changed to COD. Your order is being processed.", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    // Try direct API call to see actual response
                    var changeResult = await ServiceManager.OrderService.ChangePaymentMethodAsync(
                        OrderWithDetails.Order.Id, 
                        PaymentMethod.Cash
                    );
                    
                    if (changeResult.IsSuccess)
                    {
                        OrderWithDetails.Order.PaymentMethod = PaymentMethod.Cash;
                        OrderWithDetails.Order.Status = OrderStatus.Processing;
                        
                        Snackbar.Add("Payment method changed to COD. Your order is being processed.", Severity.Success);
                        MudDialog.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        Snackbar.Add($"Failed to change payment method: {changeResult.Errors?.FirstOrDefault()?.Description}", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing payment method: {ex.Message}");
            Snackbar.Add($"Error changing payment method: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ProceedPayment()
    {
        try
        {
            _isProcessingPayment = true;
            StateHasChanged();
            
            // Get user ID from localStorage
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user_id");
            
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("You need to log in to proceed with payment", Severity.Warning);
                _isProcessingPayment = false;
                StateHasChanged();
                return;
            }
            
            // Clear any gacha and checkout session storage to avoid conflicts
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "gacha_order_id");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "gacha_blindbox_id");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "gacha_payment_success");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "checkout_order_id");
            
            // Save order information with order-specific prefix
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "order_payment_id", OrderWithDetails.Order.Id.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "payment_referring_url", "order_details");
            
            Console.WriteLine($"Set order_payment_id: {OrderWithDetails.Order.Id.ToString()}");
            
            var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
            var returnUrl = $"{baseUrl}/my-account?tab=1"; // Return to account page with Orders tab
            
            // Get VNPay payment URL with the return URL
            var paymentResult = await ServiceManager.VNPayService.GetPaymentUrlAsync(
                OrderWithDetails.Order.Id,
                Guid.Parse(userId),
                baseUrl + "/payment/order-return?return_url=" + Uri.EscapeDataString(returnUrl)
            );
            
            if (paymentResult.IsSuccess && !string.IsNullOrEmpty(paymentResult.Value))
            {
                // Close the dialog before navigation
                MudDialog.Close();
                
                // Redirect to VNPay payment page
                NavigationManager.NavigateTo(paymentResult.Value);
            }
            else
            {
                var errorMsg = paymentResult.Errors?.FirstOrDefault()?.Description ?? "Failed to create payment URL";
                Snackbar.Add(errorMsg, Severity.Error);
                _isProcessingPayment = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error proceeding with payment: {ex.Message}");
            Snackbar.Add($"Error proceeding with payment: {ex.Message}", Severity.Error);
            _isProcessingPayment = false;
            StateHasChanged();
        }
    }
    
    private async Task CancelOrder()
    {
        var parameters = new DialogParameters
        {
            ["OrderId"] = OrderWithDetails.Order.Id,
            ["Content"] = "Are you sure you want to cancel this order?"
        };
        
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmCancelOrderDialog>("Confirm Cancel Order", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }
    
    private async Task<string> GetImageUrl(OrderDetailDto detail)
    {
        if (detail == null)
        {
            return "/images/box-placeholder.jpg";
        }
        
        // If detail has a BlindBoxItemId and we haven't loaded it yet, load it first
        if (detail.BlindBoxItemId.HasValue && 
            (!_blindBoxItems.ContainsKey(detail.Id) || _blindBoxItems[detail.Id] == null))
        {
            await LoadBlindBoxItem(detail.Id, detail.BlindBoxItemId.Value);
        }
        
        // Use BlindBoxItem's image if available
        if (detail.BlindBoxItemId.HasValue && 
            _blindBoxItems.ContainsKey(detail.Id) && 
            _blindBoxItems[detail.Id] != null && 
            !string.IsNullOrEmpty(_blindBoxItems[detail.Id].ImageUrl))
        {
            var imageUrl = _blindBoxItems[detail.Id].ImageUrl;
            if (!imageUrl.StartsWith("http://") && !imageUrl.StartsWith("https://") && !imageUrl.StartsWith("/"))
            {
                imageUrl = "/" + imageUrl;
            }
            return imageUrl;
        }
        
        // Fallback to the original detail image URL
        if (!string.IsNullOrEmpty(detail.ImageUrl))
        {
            var imageUrl = detail.ImageUrl;
            if (!imageUrl.StartsWith("http://") && !imageUrl.StartsWith("https://") && !imageUrl.StartsWith("/"))
            {
                imageUrl = "/" + imageUrl;
            }
            return imageUrl;
        }
        
        // Default placeholder if no image available
        return "/images/box-placeholder.jpg";
    }
    
    private bool HasBlindBoxItems()
    {
        return OrderWithDetails.OrderDetails.Any(od => od.BlindBoxItemId.HasValue);
    }
    
    // Add this method to load existing user reviews for this order's BlindBoxes
    private async Task LoadUserReviews()
    {
        try
        {
            // Get user ID from localStorage
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user_id");
            
            if (!string.IsNullOrEmpty(userId) && Guid.TryParse(userId, out Guid userGuid))
            {
                // Get all BlindBox IDs from the order
                var blindBoxIds = OrderWithDetails.OrderDetails
                    .Select(od => od.BlindBoxId)
                    .Distinct()
                    .ToList();
                
                if (blindBoxIds.Any())
                {
                    using var reviewService = ServiceManager.CustomerReviewsService;
                    
                    // Check each BlindBox if the user has already reviewed it
                    foreach (var blindBoxId in blindBoxIds)
                    {
                        var parameter = new ReviewParameter { PageSize = 1 };
                        var reviews = await reviewService.GetReviewsByBlindBoxIdAsync(blindBoxId, parameter, false);
                        
                        if (reviews.IsSuccess)
                        {
                            // Check if any review is from this user
                            if (reviews.Value.Any(r => r.UserId == userGuid))
                            {
                                _reviewedBlindBoxes.Add(blindBoxId);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user reviews: {ex.Message}");
        }
    }
    
    private async Task OpenReviewDialog(Guid blindBoxId, string blindBoxName)
    {
        try
        {
            // Get user ID from localStorage
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user_id");
            
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("You need to log in to submit a review", Severity.Warning);
                return;
            }
            
            var parameters = new DialogParameters
            {
                ["BlindBoxId"] = blindBoxId,
                ["UserId"] = Guid.Parse(userId),
                ["BlindBoxName"] = blindBoxName
            };
            
            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true
            };
            
            var dialog = await DialogService.ShowAsync<ReviewBlindBoxDialog>("Review BlindBox", parameters, options);
            var result = await dialog.Result;
            
            if (!result.Canceled && result.Data is bool success && success)
            {
                // Mark this BlindBox as reviewed
                _reviewedBlindBoxes.Add(blindBoxId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening review dialog: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
} 