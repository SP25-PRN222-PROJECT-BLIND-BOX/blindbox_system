@using BlindBoxShop.Shared.DataTransferObject.Order
@using BlindBoxShop.Shared.DataTransferObject.OrderDetail
@using BlindBoxShop.Shared.Enum
@using MudBlazor
@using System.Threading.Tasks
@using System
@using System.Linq
@using BlindBoxShop.Service.Contract
@using BlindBoxShop.Application.Components.Dialogs

@inject ISnackbar Snackbar
@inject IServiceManager ServiceManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @if (OrderWithDetails == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <div class="py-2">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <MudText Typo="Typo.h6">Order #@OrderWithDetails.Order.Id.ToString().Substring(0, 8)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">@OrderWithDetails.Order.CreatedAt.ToString("dd MMMM yyyy, HH:mm")</MudText>
                    </div>
                    <MudBadge Color="@GetOrderStatusColor(OrderWithDetails.Order.Status)" Overlap="true" Class="mx-6 my-4">
                        @OrderWithDetails.Order.Status.ToString()
                    </MudBadge>
                </div>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.subtitle1" Class="mb-2">Items</MudText>
                <div>
                    @foreach (var item in OrderWithDetails.OrderDetails)
                    {
                        <div class="flex justify-between w-full items-center p-2 border-b">
                            <div class="flex items-center">
                                <div class="w-12 h-12 flex-shrink-0 overflow-hidden rounded-md border border-gray-200 mr-3">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" alt="@item.BlindBoxName" 
                                             class="h-full w-full object-cover object-center" />
                                    }
                                    else
                                    {
                                        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Spa" Size="Size.Small" Color="Color.Primary" />
                                        </div>
                                    }
                                </div>
                                <div>
                                    <div class="font-medium">@item.BlindBoxName</div>
                                    <div class="text-xs text-gray-500">Qty: @item.Quantity</div>
                                </div>
                            </div>
                            <MudText Typo="Typo.body2">@FormatPrice(item.Price)</MudText>
                        </div>
                    }
                </div>
                
                <MudDivider Class="my-4" />
                
                <div class="flex justify-between items-center mb-2">
                    <MudText Typo="Typo.body1">Subtotal</MudText>
                    <MudText Typo="Typo.body2">@FormatPrice(OrderWithDetails.Order.SubTotal)</MudText>
                </div>
                <div class="flex justify-between items-center mb-2">
                    <MudText Typo="Typo.body1">Shipping</MudText>
                    <MudText Typo="Typo.body2">@FormatPrice(20000)</MudText>
                </div>
                @if (OrderWithDetails.Order.VoucherId.HasValue)
                {
                    <div class="flex justify-between items-center mb-2">
                        <MudText Typo="Typo.body1">Discount</MudText>
                        <MudText Typo="Typo.body2">-@FormatPrice(OrderWithDetails.Order.SubTotal - OrderWithDetails.Order.Total)</MudText>
                    </div>
                }
                <div class="flex justify-between items-center mt-4">
                    <MudText Typo="Typo.h6">Total</MudText>
                    <MudText Typo="Typo.h6" Color="Color.Primary">@FormatPrice(OrderWithDetails.Order.Total)</MudText>
                </div>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.subtitle1" Class="mb-2">Shipping Address</MudText>
                <MudText Typo="Typo.body2">@OrderWithDetails.Order.Address</MudText>
                <MudText Typo="Typo.body2">@OrderWithDetails.Order.Wards, @OrderWithDetails.Order.Province</MudText>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.subtitle1" Class="mb-2">Payment Method</MudText>
                <MudText Typo="Typo.body2">@OrderWithDetails.Order.PaymentMethod.ToString()</MudText>
                
                @if (OrderWithDetails.Order.Status == OrderStatus.AwaitingPayment)
                {
                    <MudAlert Severity="Severity.Warning" Class="mt-4" Icon="@Icons.Material.Filled.Payment">
                        Đơn hàng này đang chờ thanh toán. Vui lòng hoàn tất quá trình thanh toán để đơn hàng của bạn được xử lý.
                    </MudAlert>
                }
            </div>
        }
    </DialogContent>
    <DialogActions>
        <div class="w-full flex justify-between items-center px-4">
            <div>
                @if (OrderWithDetails != null && (OrderWithDetails.Order.Status == OrderStatus.AwaitingPayment || OrderWithDetails.Order.Status == OrderStatus.Processing))
                {
                    <MudButton OnClick="CancelOrder" Color="Color.Error" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Cancel">
                        Hủy đơn hàng
                    </MudButton>
                }
            </div>
            <div class="flex gap-2">
                @if (OrderWithDetails != null && OrderWithDetails.Order.Status == OrderStatus.AwaitingPayment)
                {
                    @if (OrderWithDetails.Order.PaymentMethod == PaymentMethod.VnPay)
                    {
                        <MudButton OnClick="ProceedPayment" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Payment">
                            Thanh toán lại
                        </MudButton>
                        <MudButton OnClick="ChangeToCoD" Color="Color.Info" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.SwapHoriz">
                            Đổi sang CoD
                        </MudButton>
                    }
                }
                <MudButton OnClick="Cancel" Color="Color.Primary" Variant="Variant.Text">Đóng</MudButton>
            </div>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    public MudBlazor.IMudDialogInstance MudDialog { get; set; }
    
    [Parameter] 
    public OrderWithDetailsDto OrderWithDetails { get; set; }
    
    private void Cancel() => MudDialog.Cancel();
    
    private async Task CancelOrder()
    {
        if (OrderWithDetails?.Order?.Id == null) return;
        
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Bạn có chắc chắn muốn hủy đơn hàng này không?",
            ["ButtonText"] = "Đồng ý",
            ["CancelText"] = "Hủy",
            ["Color"] = Color.Error
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowMessageBox(
            "Xác nhận hủy đơn hàng",
            "Bạn có chắc chắn muốn hủy đơn hàng này không?",
            yesText: "Đồng ý",
            cancelText: "Hủy",
            options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall }
        );
        
        if (dialog == true)
        {
            try
            {
                var cancelResult = await ServiceManager.OrderService.CancelOrderAsync(OrderWithDetails.Order.Id);
                
                if (cancelResult.IsSuccess)
                {
                    Snackbar.Add("Đơn hàng đã được hủy thành công", Severity.Success);
                    // Đóng dialog hiện tại và trả về kết quả đã cập nhật để refresh danh sách
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMsg = cancelResult.Errors?.FirstOrDefault()?.Description ?? "Không thể hủy đơn hàng";
                    Snackbar.Add(errorMsg, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private async Task ProceedPayment()
    {
        if (OrderWithDetails?.Order?.Id == null) return;
        
        try
        {
            // Lấy User ID từ localStorage
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user_id");
            
            if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out var userGuid))
            {
                Snackbar.Add("Không tìm thấy thông tin người dùng, vui lòng đăng nhập lại", Severity.Warning);
                return;
            }
            
            // Gọi service để lấy URL thanh toán VNPay
            var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
            var paymentResult = await ServiceManager.VNPayService.GetPaymentUrlAsync(OrderWithDetails.Order.Id, userGuid, baseUrl);
            
            if (paymentResult.IsSuccess && !string.IsNullOrEmpty(paymentResult.Value))
            {
                // Đóng dialog
                MudDialog.Close();
                
                // Chuyển hướng đến trang thanh toán VNPay
                NavigationManager.NavigateTo(paymentResult.Value);
            }
            else
            {
                var errorMsg = paymentResult.Errors?.FirstOrDefault()?.Description ?? "Không thể tạo URL thanh toán";
                Snackbar.Add(errorMsg, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ChangeToCoD()
    {
        if (OrderWithDetails?.Order?.Id == null) return;
        
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Bạn có chắc chắn muốn đổi sang thanh toán khi nhận hàng (CoD) không?",
            ["ButtonText"] = "Đồng ý",
            ["CancelText"] = "Hủy",
            ["Color"] = Color.Primary
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowMessageBox(
            "Xác nhận đổi phương thức thanh toán",
            "Bạn có chắc chắn muốn đổi sang thanh toán khi nhận hàng (CoD) không?",
            yesText: "Đồng ý",
            cancelText: "Hủy",
            options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall }
        );
        
        if (dialog == true)
        {
            try
            {
                var changeResult = await ServiceManager.OrderService.ChangePaymentMethodAsync(
                    OrderWithDetails.Order.Id, 
                    PaymentMethod.Cash
                );
                
                if (changeResult.IsSuccess)
                {
                    Snackbar.Add("Đã đổi sang thanh toán khi nhận hàng thành công", Severity.Success);
                    // Đóng dialog hiện tại và trả về kết quả đã cập nhật để refresh danh sách
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMsg = changeResult.Errors?.FirstOrDefault()?.Description ?? "Không thể đổi phương thức thanh toán";
                    Snackbar.Add(errorMsg, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private Color GetOrderStatusColor(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Processing => Color.Info,
            OrderStatus.AwaitingPayment => Color.Warning,
            OrderStatus.Delivered => Color.Success,
            OrderStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }
    
    private string FormatPrice(decimal price)
    {
        return $"{price.ToString("N0")} ₫";
    }
} 