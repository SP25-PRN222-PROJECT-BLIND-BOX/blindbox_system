@page "/account/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlindBoxShop.Entities.Models
@using Microsoft.AspNetCore.Authorization
@layout BlindBoxShop.Application.Components.Layout.MainLayout
@attribute [AllowAnonymous]

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Đăng nhập - BoxBox</PageTitle>

<!-- Page Header -->
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-0 px-0">
    <MudPaper Elevation="0" Class="page-header" Style="background-color: var(--mud-palette-secondary);">
        <MudText Typo="Typo.h3" Class="font-weight-bold mb-2">Đăng nhập</MudText>
        <MudText Typo="Typo.body1">Đăng nhập để tiếp tục mua sắm</MudText>
    </MudPaper>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Small" Class="py-8">
    <MudCard Elevation="3" Class="rounded-lg pa-7">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4" Variant="Variant.Filled">@errorMessage</MudAlert>
        }
        
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 font-weight-bold">Sign in to your account</MudText>
        
        <EditForm Model="Input" OnSubmit="LoginUser">
            <DataAnnotationsValidator />
            
            <MudTextField Label="Email"
                          @bind-Value="Input.Email"
                          For="@(() => Input.Email)"
                          Variant="Variant.Outlined"
                          Class="mb-4"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          Required="true"
                          RequiredError="Email is required"
                          FullWidth="true" />
                          
            <MudTextField Label="Password"
                          @bind-Value="Input.Password"
                          For="@(() => Input.Password)"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Class="mb-4"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock"
                          Required="true"
                          RequiredError="Password is required"
                          FullWidth="true" />
                          
            <MudCheckBox @bind-Checked="Input.RememberMe" Label="Remember me" Color="Color.Primary" Class="mb-4" T="bool" />
            
            <div class="d-flex flex-column gap-2 mb-4">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           StartIcon="@Icons.Material.Filled.Login"
                           FullWidth="true">
                    Sign In
                </MudButton>
                
                <MudButton Href="/account/register"
                           Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           Size="Size.Medium"
                           Class="mt-2"
                           FullWidth="true">
                    Create new account
                </MudButton>
            </div>
            
            <div class="d-flex flex-column align-center">
                <MudLink Href="/account/forgotpassword" Color="Color.Primary">Forgot password?</MudLink>
            </div>
        </EditForm>
    </MudCard>
</MudContainer>

@code {
    private string? errorMessage;
    
    private InputModel Input { get; set; } = new();
    
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    
    private async Task LoginUser(EditContext context)
    {
        if (context.Validate())
        {
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                Snackbar.Add("Login successful", Severity.Success);
                NavigationManager.NavigateTo(ReturnUrl ?? "/");
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                errorMessage = "Account locked out. Please try again later.";
            }
            else
            {
                errorMessage = "Invalid login attempt.";
            }
        }
    }
    
    private class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";
        
        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        
        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
