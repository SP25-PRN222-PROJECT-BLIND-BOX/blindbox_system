@page "/checkout"
@page "/checkout/direct/{blindBoxId}"
@using System.Text.Json
@using BlindBoxShop.Application.Models
@layout BlindBoxShop.Application.Components.Layout.MainLayout

<PageTitle>Thanh Toán</PageTitle>

<div class="container mx-auto py-6 px-4">
    <div class="bg-cyan-50 rounded-lg p-4 mb-6">
        <h1 class="text-xl font-bold text-cyan-800">Thanh Toán</h1>
    </div>

    @if (_cartItems.Count == 0)
    {
        <div class="bg-white rounded-lg shadow-sm p-8 text-center">
            <MudIcon Icon="@Icons.Material.Outlined.ShoppingCart" Size="Size.Large" Class="text-gray-400 mb-4" />
            <h3 class="text-lg font-medium mb-2">Giỏ hàng của bạn đang trống</h3>
            <p class="text-gray-500 mb-4">Bạn cần thêm sản phẩm vào giỏ hàng trước khi thanh toán.</p>
            <div class="flex flex-col md:flex-row gap-3 justify-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/shop" Class="rounded-md px-6">
                    Tiếp tục mua sắm
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/sample-products" Class="rounded-md px-6">
                    Xem sản phẩm mẫu
                </MudButton>
            </div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
            <!-- Left Column - Shipping Information -->
            <div class="lg:col-span-8">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <!-- Shipping Info -->
                    <div class="md:col-span-2">
                        <div class="bg-white rounded-lg shadow-sm p-6">
                            <h3 class="text-lg font-medium mb-4">Địa chỉ giao hàng</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <MudTextField T="string" 
                                                Label="Họ" 
                                                Variant="Variant.Outlined" 
                                                FullWidth="true" 
                                                @bind-Value="_checkoutInfo.FirstName" />
                                </div>
                                <div>
                                    <MudTextField T="string" 
                                                Label="Tên" 
                                                Variant="Variant.Outlined" 
                                                FullWidth="true" 
                                                @bind-Value="_checkoutInfo.LastName" />
                                </div>
                            </div>

                            <div class="mb-4">
                                <MudTextField T="string" 
                                          Label="Địa chỉ" 
                                          Variant="Variant.Outlined" 
                                          FullWidth="true" 
                                          @bind-Value="_checkoutInfo.Address" />
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                <div>
                                    <MudTextField T="string" 
                                              Label="Tỉnh/Thành phố" 
                                              Variant="Variant.Outlined" 
                                              FullWidth="true" 
                                              @bind-Value="_checkoutInfo.Province" />
                                </div>
                                <div>
                                    <MudTextField T="string" 
                                              Label="Quận/Huyện" 
                                              Variant="Variant.Outlined" 
                                              FullWidth="true" 
                                              @bind-Value="_checkoutInfo.District" />
                                </div>
                                <div>
                                    <MudTextField T="string" 
                                              Label="Phường/Xã" 
                                              Variant="Variant.Outlined" 
                                              FullWidth="true" 
                                              @bind-Value="_checkoutInfo.Ward" />
                                </div>
                            </div>

                            <div class="mb-4">
                                <MudTextField T="string" 
                                          Label="Số điện thoại" 
                                          Variant="Variant.Outlined" 
                                          FullWidth="true" 
                                          @bind-Value="_checkoutInfo.Phone" />
                            </div>
                            
                            <div class="mb-4">
                                <MudTextField T="string" 
                                          Label="Email" 
                                          Variant="Variant.Outlined" 
                                          FullWidth="true" 
                                          @bind-Value="_checkoutInfo.Email" />
                            </div>
                        </div>
                    </div>

                    <!-- Payment Methods -->
                    <div class="md:col-span-2">
                        <div class="bg-white rounded-lg shadow-sm p-6">
                            <div class="mb-6">
                                <h3 class="text-lg font-semibold mb-4">Phương thức thanh toán</h3>
                                
                                <div class="flex flex-col space-y-3">
                                    <div class="@(GetPaymentMethodClass("Cash on Delivery")) p-3 border rounded-lg" @onclick="@(() => SelectPaymentMethod("Cash on Delivery"))">
                                        <div class="flex items-center">
                                            <MudIcon Icon="@Icons.Material.Filled.MonetizationOn" Class="mr-2 text-cyan-600" />
                                            <span class="flex-grow">Thanh toán khi nhận hàng</span>
                                            @if (_checkoutInfo.PaymentMethod == "Cash on Delivery")
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="@(GetPaymentMethodClass("VNPay")) p-3 border rounded-lg" @onclick="@(() => SelectPaymentMethod("VNPay"))">
                                        <div class="flex items-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-2 text-cyan-600" />
                                            <span class="flex-grow">VNPay</span>
                                            @if (_checkoutInfo.PaymentMethod == "VNPay")
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                            }
                                        </div>
                                    </div>
                                </div>

                                <!-- Debug info section -->
                                @* <div class="mt-4 p-3 bg-gray-50 rounded-lg">
                                    <p class="font-medium">Đã chọn: <span class="text-cyan-700">@_checkoutInfo.PaymentMethod</span></p>
                                    <MudButton OnClick="@SavePaymentMethod" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-2">
                                        Cập nhật phương thức thanh toán
                                    </MudButton>
                                </div> *@
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Order Items -->
                <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium">Sản phẩm</h3>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/cart">Chỉnh sửa giỏ hàng</MudButton>
                    </div>
                    
                    <MudTable Items="_cartItems" Hover="true" Breakpoint="Breakpoint.Sm" Class="border-0">
                        <HeaderContent>
                            <MudTh Class="uppercase text-xs font-medium text-gray-500">Sản phẩm</MudTh>
                            <MudTh Class="uppercase text-xs font-medium text-gray-500 text-right">Đơn giá</MudTh>
                            <MudTh Class="uppercase text-xs font-medium text-gray-500 text-center">Số lượng</MudTh>
                            <MudTh Class="uppercase text-xs font-medium text-gray-500 text-right">Thành tiền</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <div class="flex items-center">
                                    <img src="@context.ImageUrl" alt="@context.ProductName" class="w-16 h-16 object-cover mr-3 rounded" />
                                    <div class="flex flex-col">
                                        <div class="font-medium">@context.ProductName</div>
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd Class="text-right">@FormatPrice(context.Price)</MudTd>
                            <MudTd Class="text-center">x@(context.Quantity)</MudTd>
                            <MudTd Class="text-right font-medium">@FormatPrice(context.Price * context.Quantity)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </div>
            
            <!-- Right Column - Order Summary -->
            <div class="lg:col-span-4">
                <div class="bg-white rounded-lg shadow-sm p-6 sticky top-4">
                    <h3 class="text-lg font-medium mb-4">Tổng đơn hàng</h3>
                    
                    <div class="flex justify-between py-2">
                        <div>Tạm tính</div>
                        <div class="font-medium">@FormatPrice(Subtotal)</div>
                    </div>
                    <div class="flex justify-between py-2">
                        <div>Phí vận chuyển</div>
                        <div class="font-medium">@FormatPrice(ShippingCost)</div>
                    </div>
                    <div class="border-t border-gray-200 my-3"></div>
                    <div class="flex justify-between py-2 font-bold text-lg">
                        <div>Tổng cộng</div>
                        <div class="text-cyan-700">@FormatPrice(Subtotal + ShippingCost)</div>
                    </div>
                    
                    <div class="mt-6">
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  Size="Size.Large"
                                  FullWidth="true"
                                  StartIcon="@Icons.Material.Filled.Payment"
                                  OnClick="@ProcessPayment"
                                  Disabled="@_isProcessing">
                            Proceed to Payment
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private async Task ClearPaymentStorage()
    {
        // Xóa tất cả storage liên quan đến payment và gacha
        // SessionStorage items
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "gacha_order_id");
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "gacha_blindbox_id");
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "gacha_payment_success");
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "order_payment_id");
        
        // LocalStorage items
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "order_payment_id");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "payment_referring_url");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "vnpay_payment_id");
        
        Console.WriteLine("Cleared all payment-related storage when entering checkout page");
    }

    private async Task ProcessPaymentAsync()
    {
        try
        {
            _isProcessing = true;
            StateHasChanged();

            // Get user ID from localStorage
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user_id");
            
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("You need to log in to proceed with payment", Severity.Warning);
                _isProcessing = false;
                StateHasChanged();
                return;
            }
            
            // Clear payment storage once more before creating a new order
            // to ensure no stale data interferes with the new payment flow
            await ClearPaymentStorage();
            
            // Save current URL to localStorage to indicate payment is from checkout
            // Use the same key as OrderDetail for consistency
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "payment_referring_url", "order_details");
            
            // Create order with Pending status
            var orderResult = await CreateOrder("Pending");
            
            if (orderResult != null)
            {
                var orderId = orderResult.Id;
                
                // Save order ID to both localStorage and sessionStorage for redundancy
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "order_payment_id", orderId.ToString());
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "order_payment_id", orderId.ToString());
                Console.WriteLine($"Set order_payment_id in both localStorage and sessionStorage: {orderId.ToString()}");
                
                // Get base URL
                var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
                var accountPageUrl = baseUrl + "/my-account?tab=1";
                
                // Use exact same URL pattern as order details
                var paymentResult = await ServiceManager.VNPayService.GetPaymentUrlAsync(
                    orderId,
                    Guid.Parse(userId),
                    baseUrl + "/payment/order-return?return_url=" + Uri.EscapeDataString(accountPageUrl)
                );
                
                if (paymentResult.IsSuccess && !string.IsNullOrEmpty(paymentResult.Value))
                {
                    // Log for debugging
                    Console.WriteLine($"Redirecting to VNPay URL: {paymentResult.Value}");
                    
                    // Clear cart before redirecting
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "blindbox_cart");
                    
                    // Redirect to VNPay payment page
                    NavigationManager.NavigateTo(paymentResult.Value);
                }
                else
                {
                    var errorMsg = paymentResult.Errors?.FirstOrDefault()?.Description ?? "Could not create payment URL";
                    Snackbar.Add(errorMsg, Severity.Error);
                    _isProcessing = false;
                    StateHasChanged();
                }
            }
            else
            {
                Snackbar.Add("Could not create order", Severity.Error);
                _isProcessing = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            _isProcessing = false;
            StateHasChanged();
        }
    }
} 