@page "/customer-reviews"
@using BlindBoxShop.Entities.Models
@using Microsoft.EntityFrameworkCore
@inject IReviewServiceManager ReviewService
@inject NavigationManager Navigation

<div class="container mt-5">
    <h3 class="mb-4 text-center">Customer Reviews</h3>

    @if (customerReviews == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading...</p>
        </div>
    }
    else if (customerReviews.Count == 0)
    {
        <div class="alert alert-info text-center" role="alert">
            No reviews found.
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var review in customerReviews)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title mb-0">
                                    <span class="text-muted small">User:</span> @(review.User?.FirstName ?? "Unknown User")
                                </h5>
                                <span class="badge bg-warning text-dark">
                                    <span class="text-muted small">Rating:</span> @review.RatingStar <i class="bi bi-star-fill"></i>
                                </span>
                            </div>
                            <p class="text-muted small mb-2">
                                <span class="text-muted small">Blind Box:</span>
                                <i class="bi bi-box-seam me-1"></i> @(review.BlindBox?.Name ?? "Unknown BlindBox")
                            </p>
                            <div class="mb-3">
                                <p class="text-muted small mb-1">Feedback:</p>
                                <p class="card-text">@review.FeedBack</p>
                            </div>

                            @if (review.ReplyReviews != null)
                            {
                                <div class="mt-3 p-3 bg-light rounded">
                                    <p class="text-muted small mb-1">Admin Reply:</p>
                                    <p class="text-muted small mb-0">@review.ReplyReviews.Reply</p>
                                </div>
                            }
                            else
                            {
                                <div class="mt-3">
                                    <label class="text-muted small mb-1">Your Reply:</label>
                                    <input type="text" class="form-control" @bind="replyInputs[review.Id]" placeholder="Enter your reply" />
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-transparent border-0">
                            @if (review.ReplyReviews == null)
                            {
                                <button class="btn btn-primary btn-reply w-100" @onclick="() => SubmitReply(review.Id)">
                                    <i class="bi bi-reply-fill me-2"></i> Reply
                                </button>
                            }
                            else
                            {
                                <span class="text-success d-block text-center">
                                    <i class="bi bi-check-circle-fill me-1"></i> Replied
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            @message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>

<style>
    .card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1) !important;
        }

    .btn-reply {
        background: linear-gradient(90deg, #007bff, #00c4ff);
        border: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .btn-reply:hover {
            background: linear-gradient(90deg, #0056b3, #0096cc);
            transform: scale(1.05);
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.3);
        }

        .btn-reply i {
            font-size: 1.2rem;
        }

    .badge {
        font-size: 0.9rem;
        padding: 5px 10px;
    }

    .text-muted.small {
        font-size: 0.85rem;
    }
</style>

@code {
    private List<CustomerReviews> customerReviews;
    private Dictionary<Guid, string> replyInputs = new Dictionary<Guid, string>();
    private string message;
	private string? managerId;

    protected override async Task OnInitializedAsync()
    {
        //managerId = await LocalStorage.GetItemAsync<string>("ManagerId");
        
        customerReviews = await ReviewService.GetAllCustomerReviewsAsync();
        foreach (var review in customerReviews)
        {
            replyInputs[review.Id] = string.Empty;
        }
    }

    private async Task SubmitReply(Guid customerReviewId)
    {
        if (string.IsNullOrWhiteSpace(replyInputs[customerReviewId]))
        {
            message = "Reply cannot be empty.";
            return;
        }

        try
        {
            
            var userId = new Guid("CA537960-7EAC-4D49-8AB8-DA3A2EF27FC1"); // Thay bằng trong trang trc đó: await LocalStorage.SetItemAsync("BlindBoxId", "51920514-75FB-4BF9-A9D7-6FDA40AFA442");

            await ReviewService.AddReplyReviewAsync(customerReviewId, userId, replyInputs[customerReviewId]);
            message = "Reply submitted successfully!";

            // Refresh danh sách reviews
            customerReviews = await ReviewService.GetAllCustomerReviewsAsync();
            replyInputs[customerReviewId] = string.Empty;
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }
}