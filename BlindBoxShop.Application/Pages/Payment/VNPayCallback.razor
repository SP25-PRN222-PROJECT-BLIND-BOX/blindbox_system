@page "/payment/vnpay-callback"
@using BlindBoxShop.Shared.DataTransferObject.VNPay
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Specialized
@layout BlindBoxShop.Application.Components.Layout.MainLayout

@inject IServiceManager ServiceManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Xử lý thanh toán - BoxBox</PageTitle>

<div class="container mx-auto py-10 px-4">
    <div class="max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center">
        <div class="flex flex-col items-center justify-center space-y-4">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.h6">Đang xử lý thanh toán...</MudText>
            <MudText Typo="Typo.body2" Class="text-gray-500">Vui lòng không đóng trang này</MudText>
        </div>
    </div>
</div>

@code {
    private bool _isFirstRender = true;
    private VNPayRequest _vnpayRequest;

    protected override void OnInitialized()
    {
        // Parse query parameters from URL - only prepare the data, don't call JS here
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        
        // Create VNPayRequest object from query parameters
        _vnpayRequest = new VNPayRequest
        {
            VnpAmount = queryParams.TryGetValue("vnp_Amount", out var amount) ? amount.ToString() : string.Empty,
            VnpBankCode = queryParams.TryGetValue("vnp_BankCode", out var bankCode) ? bankCode.ToString() : string.Empty,
            VnpBankTranNo = queryParams.TryGetValue("vnp_BankTranNo", out var bankTranNo) ? bankTranNo.ToString() : string.Empty,
            VnpCardType = queryParams.TryGetValue("vnp_CardType", out var cardType) ? cardType.ToString() : string.Empty,
            VnpOrderInfo = queryParams.TryGetValue("vnp_OrderInfo", out var orderInfo) ? orderInfo.ToString() : string.Empty,
            VnpPayDate = queryParams.TryGetValue("vnp_PayDate", out var payDate) ? payDate.ToString() : string.Empty,
            VnpResponseCode = queryParams.TryGetValue("vnp_ResponseCode", out var responseCode) ? responseCode.ToString() : string.Empty,
            VnpSecureHash = queryParams.TryGetValue("vnp_SecureHash", out var secureHash) ? secureHash.ToString() : string.Empty,
            VnpTmnCode = queryParams.TryGetValue("vnp_TmnCode", out var tmnCode) ? tmnCode.ToString() : string.Empty,
            VnpTransactionNo = queryParams.TryGetValue("vnp_TransactionNo", out var transactionNo) ? transactionNo.ToString() : string.Empty,
            VnpTransactionStatus = queryParams.TryGetValue("vnp_TransactionStatus", out var transactionStatus) ? transactionStatus.ToString() : string.Empty,
            VnpTxnRef = queryParams.TryGetValue("vnp_TxnRef", out var txnRef) ? txnRef.ToString() : string.Empty
        };
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ProcessPaymentCallbackAsync();
            _isFirstRender = false;
        }
    }
    
    private async Task ProcessPaymentCallbackAsync()
    {
        try
        {
            // Kiểm tra xem thanh toán này đến từ đâu dựa vào URL gốc được lưu trong localStorage
            var referringUrl = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "payment_referring_url");
            Console.WriteLine($"Payment referring URL: {referringUrl ?? "Unknown"}");
            
            // Check if this is a BlindBox gacha payment by looking for order ID in sessionStorage
            var tempOrderId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "temp_order_id");
            var blindBoxId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "blindbox_id");
            bool isGachaPayment = !string.IsNullOrEmpty(tempOrderId) && !string.IsNullOrEmpty(blindBoxId);
            
            // Hiển thị thông tin cho debug
            Console.WriteLine($"isGachaPayment: {isGachaPayment}, tempOrderId: {tempOrderId}, blindBoxId: {blindBoxId}");
            Console.WriteLine($"Response code: {_vnpayRequest.VnpResponseCode}, Transaction ref: {_vnpayRequest.VnpTxnRef}");
            
            // Process payment callback
            var result = await ServiceManager.VNPayService.ProcessPaymentCallbackAsync(_vnpayRequest);
            
            if (result.IsSuccess && result.Value != null)
            {
                var response = result.Value;
                
                // Check if payment was successful
                if (response.IsSuccessful)
                {
                    try 
                    {
                        // Xác định loại thanh toán dựa trên referringUrl và sessionStorage
                        bool isFromBlindBoxGacha = referringUrl == "blindbox-gacha" || isGachaPayment;
                        
                        if (isFromBlindBoxGacha)
                        {
                            // ===== ONLINE BLINDBOX PAYMENT FLOW =====
                            Console.WriteLine("ONLINE BLINDBOX PAYMENT - Redirecting to BlindBoxGacha payment-return");
                            
                            try
                            {
                                // Đảm bảo cập nhật trạng thái đơn hàng trước khi redirect
                                if (Guid.TryParse(tempOrderId, out Guid orderId))
                                {
                                    try
                                    {
                                        var order = await ServiceManager.OrderService.GetOrderWithDetailsByIdAsync(orderId, false);
                                        if (order != null && order.IsSuccess && order.Value != null)
                                        {
                                            // Cập nhật trạng thái đơn hàng thành công
                                            Console.WriteLine($"Order found, current status: {order.Value.Order.Status}");
                                        }
                                        else
                                        {
                                            Console.WriteLine("Order not found or could not be retrieved");
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine($"Error checking order: {ex.Message}");
                                    }
                                }

                                // Lưu thông tin vào sessionStorage để dùng trong BlindBoxGacha
                                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "payment_success", "true");
                                
                                // Redirect to BlindBoxGacha payment return page với đầy đủ thông tin
                                Console.WriteLine("Redirecting to blindbox-gacha");
                                if (!string.IsNullOrEmpty(blindBoxId) && Guid.TryParse(blindBoxId, out Guid blindBoxGuid))
                                {
                                    NavigationManager.NavigateTo($"/blindbox-gacha/{blindBoxId}?vnp_ResponseCode={_vnpayRequest.VnpResponseCode}&vnp_TxnRef={_vnpayRequest.VnpTxnRef}", true);
                                }
                                else
                                {
                                    NavigationManager.NavigateTo($"/blindbox-gacha?vnp_ResponseCode={_vnpayRequest.VnpResponseCode}&vnp_TxnRef={_vnpayRequest.VnpTxnRef}", true);
                                }
                                return; // Exit the method to prevent double redirects
                            }
                            catch (Exception ex) 
                            {
                                Console.WriteLine($"Error redirecting to gacha page: {ex.Message}");
                                Snackbar.Add($"Lỗi khi chuyển hướng: {ex.Message}", Severity.Error);
                                // Nếu lỗi khi chuyển hướng đến trang gacha, tiếp tục xử lý như thanh toán thông thường
                            }
                        }
                        else
                        {
                            // ===== PHYSICAL BLINDBOX PAYMENT FLOW =====
                            Console.WriteLine("PHYSICAL BLINDBOX PAYMENT - Redirecting to default success URL");
                            
                            // Clear cart after successful payment for physical products
                            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "blindbox_cart");
                            
                            // XÓA TẤT CẢ dữ liệu sessionStorage của blindbox gacha để tránh redirect sai
                            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "temp_order_id");
                            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "blindbox_id"); 
                            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "payment_success");
                            
                            // Chuyển hướng đến URL thành công
                            Console.WriteLine($"Redirecting to order-success: {response.RedirectUrl}");
                            NavigationManager.NavigateTo(response.RedirectUrl, true);
                            return; // Exit the method to prevent double redirects
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error determining payment type: {ex.Message}");
                        
                        // Nếu có lỗi, chuyển về trang mặc định
                        Console.WriteLine($"Error occurred, falling back to default URL: {response.RedirectUrl}");
                        NavigationManager.NavigateTo(response.RedirectUrl, true);
                        return;
                    }
                }
                else
                {
                    // Thanh toán không thành công
                    
                    // Xóa các session storage của blindbox gacha nếu có
                    await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "temp_order_id");
                    await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "blindbox_id");
                    await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "payment_success");
                    
                    // Chuyển hướng đến URL thất bại
                    Console.WriteLine($"Payment failed, redirecting to: {response.RedirectUrl}");
                    NavigationManager.NavigateTo(response.RedirectUrl, true);
                    return;
                }
            }
            else
            {
                // Chuyển hướng đến trang thất bại trong trường hợp có lỗi xử lý
                var errorMessage = result.Errors?.FirstOrDefault()?.Description ?? "Đã xảy ra lỗi khi xử lý thanh toán.";
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "payment_error", errorMessage);
                
                // Xóa các session storage của blindbox gacha nếu có
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "temp_order_id");
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "blindbox_id");
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "payment_success");
                
                Console.WriteLine("Error processing payment, redirecting to order-failed");
                NavigationManager.NavigateTo("/order-failed", true);
                return;
            }
        }
        catch (Exception ex)
        {
            // Chuyển hướng đến trang thất bại trong trường hợp có lỗi
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "payment_error", $"Lỗi xử lý thanh toán: {ex.Message}");
            
            // Xóa các session storage của blindbox gacha nếu có
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "temp_order_id");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "blindbox_id");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "payment_success");
            
            Console.WriteLine($"Exception caught: {ex.Message}, redirecting to order-failed");
            NavigationManager.NavigateTo("/order-failed", true);
            return;
        }
    }
} 